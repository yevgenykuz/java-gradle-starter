plugins {
    id 'java' // add java compilation, testing and bundling
    id 'com.github.johnrengelman.shadow' version '8.1.1' // build an executable JAR with all dependencies [shadowJar]
    id 'maven-publish' // add project information (developers, license, etc.) and publish to maven repository
    id 'signing' // generate a signature and checksum files for each artifact.
    id 'jacoco' // codecov code coverage integration with JaCoCo [jacocoTestReport]
    id 'checkstyle' // Checkstyle checks [check]
    id 'pmd' // PMD checks [check]
    id 'com.github.spotbugs' version '6.1.7' // SpotBugs checks [check]
}

group = 'com.yevgenyk'
version = '1.0.0-SNAPSHOT'
description = 'Java, gradle based, playground starter project'

sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.12.1'
    testImplementation 'org.junit.platform:junit-platform-console-standalone:1.12.1'
    testImplementation 'org.hamcrest:hamcrest-library:3.0'

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.14.0' // SpotBugs security checks plugin
}

// set compiler encoding to UTF-8 in all tasks with JavaCompile type
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// profiles with parameter injection, use with gradle -Pprofile=development [task] or gradle -Pprofile=production [task]
// see profile-development.gradle and profile-production.gradle
if (!hasProperty('profile')) ext.profile = 'development'
apply from: "profile-${profile}.gradle"
processResources {
    filesMatching('**/temp.properties') {
        //noinspection UnnecessaryQualifiedReference
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                'p1': project.property('p1')
        ]
    }
}

// point to main class to run compiled [jar] and [shadowJar] with 'java -jar'
jar {
    manifest {
        attributes(
                'Main-Class': 'com.yevgenyk.Main'
        )
    }
    setArchiveClassifier('original') // append '-original' to compiled jar
}

shadowJar {
    setArchiveClassifier(null) // rename compiled shadowJar (with dependencies) to the original name
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                url = 'https://github.com/yevgenykuz/java-gradle-starter'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'yevgenykuz'
                        name = 'Yevgeny Kuznetsov'
                        email = 'yevgenyku@gmail.com'
                        url = 'https://yevgenyk.com'
                    }
                }
                scm {
                    url = 'https://github.com/yevgenykuz/java-gradle-starter'
                    connection = 'https://github.com/yevgenykuz/java-gradle-starter'
                }
                issueManagement {
                    url = 'https://github.com/yevgenykuz/java-gradle-starter/issues'
                    system = 'GitHub'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

test {
    useJUnitPlatform()
}

// codecov code coverage integration with JaCoCo - enable XML reports
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}
check.dependsOn jacocoTestReport

// Checkstyle checks
checkstyle {
    toolVersion '10.3.3'
    configFile file('tools/checkstyle.xml')
    maxWarnings 0
}

// PMD checks
pmd {
    toolVersion '6.39.0'
    ruleSetFiles file('tools/pmd-ruleset.xml')
    consoleOutput true
}

// SpotBugs checks
import com.github.spotbugs.snom.Effort
spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    effort = Effort.MAX
}
